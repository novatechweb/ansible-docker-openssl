---
# file: roles/docker-openssl/tasks/main.yaml

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

- name: restore dir
  file:
    state: directory
    path: '{{ openssl_docker_restore_dir }}'
    owner: root
    group: tape
    mode: 'u=rwx,g=rwx,o=rx'
    recurse: no
    setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ openssl_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.openssl

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.openssl

# *****************************************************************************
# update the Docker restore config

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ openssl_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_openssl_restore

# *****************************************************************************
# Update or make the image.

- name: Checkout image repo
  git:
    repo: '{{ openssl_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-openssl'

- name: build image
  docker_build:
    image_name: '{{ openssl_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    dockerfile_dir: '{{ docker_projects_dir }}/docker-openssl'

# *****************************************************************************
# Create the data volumes

- name: data-volume container
  docker_datavolume:
    image_name: '{{ openssl_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    data_volume_container_name: '{{ openssl_dv_name }}'

# *****************************************************************************
# Populate the openssl data-volume with default data

- name: initial populate
  command: 'docker run --rm --volumes-from {{ openssl_dv_name }} {{ openssl_image_name }}:{{ docker_image_tag }} generate'
  when: st_openssl_restore.stat.exists == False

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_openssl_restore.stat.exists == False
